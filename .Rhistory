dat
dat$fraction <- dat$Fed / sum(dat$Fed)
dat$ymax <- cumsum(dat$fraction)
dat$ymin <- c(0, head(dat$ymax, n=-1)) #-1 means all but number 1. is the compliment
dat$mid <- dat$ymin + (dat$ymax - dat$ymin)/2
dat
pie <- ggplot(dat,
aes(fill=recip_cat_type,
xmax=3, xmin=2, #only one bar from 3 to 4 in the x axis.
ymax=ymax, ymin=ymin)) +  #look at the df and see these values represent the stacks.
xlim(c(0, 4)) + #sets the x limints, which in this case is the radius
geom_rect(colour="white", #makes the border of the rectangles white.
size = 1.5) + #size of the border
coord_polar(theta="y") + #makes the bars start at 12 o clock vertically and then bars grow cirularly, like a race track.
geom_text(aes(x= 2.5, y = mid, label = paste0(round(fraction*100, digits = 1),"%")),
size=4,
fontface = "bold",
hjust = .5,
vjust = .5,
colour = "white") +
ggtitle(label="Main Federal Funding Agencies in NY") +
theme_bw() + #eliminates the background
theme(panel.grid=element_blank(), #eliminates the grid.
axis.text=element_blank(), #eliminates the text of axis. note that the x axis is the radius from the center to 12 o clock and that y axis is the whole cirumference, starting at 12 o clock.
axis.ticks=element_blank(),
axis.title = element_blank(),
panel.border = element_blank(),
plot.margin = margin(0,0,0,0, "cm"),
legend.margin = margin(0,0,0,0, "cm"),
legend.title = element_blank(),
legend.position = "right",
legend.text = element_text(colour = "grey40", size = 8))
pie
pie <- ggplot(dat,
aes(fill=maj_agency_cat,
xmax=3, xmin=2, #only one bar from 3 to 4 in the x axis.
ymax=ymax, ymin=ymin)) +  #look at the df and see these values represent the stacks.
xlim(c(0, 4)) + #sets the x limints, which in this case is the radius
geom_rect(colour="white", #makes the border of the rectangles white.
size = 1.5) + #size of the border
coord_polar(theta="y") + #makes the bars start at 12 o clock vertically and then bars grow cirularly, like a race track.
geom_text(aes(x= 2.5, y = mid, label = paste0(round(fraction*100, digits = 1),"%")),
size=4,
fontface = "bold",
hjust = .5,
vjust = .5,
colour = "white") +
ggtitle(label="Main Federal Funding Agencies in NY") +
theme_bw() + #eliminates the background
theme(panel.grid=element_blank(), #eliminates the grid.
axis.text=element_blank(), #eliminates the text of axis. note that the x axis is the radius from the center to 12 o clock and that y axis is the whole cirumference, starting at 12 o clock.
axis.ticks=element_blank(),
axis.title = element_blank(),
panel.border = element_blank(),
plot.margin = margin(0,0,0,0, "cm"),
legend.margin = margin(0,0,0,0, "cm"),
legend.title = element_blank(),
legend.position = "right",
legend.text = element_text(colour = "grey40", size = 8))
pie
source_github <- function( url ) {
# load package
require(RCurl)
# read script lines from website and evaluate
script <- getURL(url, ssl.verifypeer = FALSE)
eval(parse(text = script), envir=.GlobalEnv)
}
#load the donutzz function using the RAW link
source_github("https://raw.githubusercontent.com/icps86/Functions/master/donutzz.R")
x <- data.frame(MGenre = c("Medieval Metal", "Doom Metal", "Symbolic Metal", "Metal Metal", "Mathematical metal"), Fans  = c(40, 90, 10, 20, 80), row.names = NULL)
x
donutzz(x = x$Fans, lev = x$MGenre, main = "Composition of Thematic Metal Fans in Iowa" )
# Download the data, clean
gra16.named <- readRDS(gzcon(url("https://github.com/DataCapstone/Data-Capstone/blob/master/Raw-Data/NYgra16_counties_named.rds?raw=true")))
codes <- read.csv("https://raw.githubusercontent.com/DataCapstone/Data-Capstone/master/Raw-Data/countycodesNY.csv")
gra16.without.state <- filter(gra16.named , recipient_type != "00: State government")
gra16.2 <- mutate(gra16.without.state, county = as.character(Name))
gra16.3 <- gra16.2[ c("recipient_name" , "recipient_county_code", "county" , "recipient_type" , "fed_funding_amount" , "assistance_type" , "cfda_program_title" , "agency_name" ) ]
#Load the population data
censuskey <- "cc0582f55dc6c9f75f5ea92824c86e0ae5d0d5d8"
population.dat <- getCensus(name="acs5", vintage=2015, key=censuskey,
vars=c("B01001_001E"), region="county:*", regionin = "state: 36")
colnames(population.dat) <- c("state","county_code", "population")
population.dat$county_code <- as.numeric(as.character(population.dat$county_code))
population.dat.2 <- merge(population.dat , codes, by.x = "county_code", by.y = "Fips")
# Aggregation function
agg.county <- function(df , var){
ag <- aggregate(df$fed_funding_amount, by= list( df$county, var), FUN = sum  )
colnames(ag) <- c("county", "var", "fund")
return(ag)
}
# Per capita aggregation function
agg.county.percap <- function(df, df.p , var){
ag <- aggregate(df$fed_funding_amount, by= list( df$county, var), FUN = sum  )
colnames(ag) <- c("county", "var", "fund")
ag.pop <- merge(ag , df.p, by.x = "county", by.y = "Name")
ag.pop.2 <- mutate(ag.pop , percap =  fund / population )
ag.pop.3 <- ag.pop.2[c("var", "fund", "percap", "county")]
return(ag.pop.3)
}
gra16.4 <- filter(gra16.3 , county %in% c("Onondaga", "Madison") )
pop.filtered <- filter(population.dat.2 , Name %in% c("Onondaga", "Madison") )
agg.per <- agg.county.percap(gra16.4, pop.filtered, gra16.4$recipient_type)
gra16.without.state <- filter(gra16.named , recipient_type != "00: State government")
gra16.2 <- mutate(gra16.without.state, county = as.character(Name))
gra16.3 <- gra16.2[ c("recipient_name" , "recipient_county_code", "county" , "recipient_type" , "fed_funding_amount" , "assistance_type" , "cfda_program_title" , "agency_name" ) ]
#Load the population data
censuskey <- "cc0582f55dc6c9f75f5ea92824c86e0ae5d0d5d8"
population.dat <- getCensus(name="acs5", vintage=2015, key=censuskey,
vars=c("B01001_001E"), region="county:*", regionin = "state: 36")
colnames(population.dat) <- c("state","county_code", "population")
population.dat$county_code <- as.numeric(as.character(population.dat$county_code))
population.dat.2 <- merge(population.dat , codes, by.x = "county_code", by.y = "Fips")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(pander)
library(shiny)
library(censusapi)
library(plotly)
# Download the data, clean
gra16.named <- readRDS(gzcon(url("https://github.com/DataCapstone/Data-Capstone/blob/master/Raw-Data/NYgra16_counties_named.rds?raw=true")))
codes <- read.csv("https://raw.githubusercontent.com/DataCapstone/Data-Capstone/master/Raw-Data/countycodesNY.csv")
gra16.without.state <- filter(gra16.named , recipient_type != "00: State government")
gra16.2 <- mutate(gra16.without.state, county = as.character(Name))
gra16.3 <- gra16.2[ c("recipient_name" , "recipient_county_code", "county" , "recipient_type" , "fed_funding_amount" , "assistance_type" , "cfda_program_title" , "agency_name" ) ]
#Load the population data
censuskey <- "cc0582f55dc6c9f75f5ea92824c86e0ae5d0d5d8"
population.dat <- getCensus(name="acs5", vintage=2015, key=censuskey,
vars=c("B01001_001E"), region="county:*", regionin = "state: 36")
colnames(population.dat) <- c("state","county_code", "population")
population.dat$county_code <- as.numeric(as.character(population.dat$county_code))
population.dat.2 <- merge(population.dat , codes, by.x = "county_code", by.y = "Fips")
# Aggregation function
agg.county <- function(df , var){
ag <- aggregate(df$fed_funding_amount, by= list( df$county, var), FUN = sum  )
colnames(ag) <- c("county", "var", "fund")
return(ag)
}
# Per capita aggregation function
agg.county.percap <- function(df, df.p , var){
ag <- aggregate(df$fed_funding_amount, by= list( df$county, var), FUN = sum  )
colnames(ag) <- c("county", "var", "fund")
ag.pop <- merge(ag , df.p, by.x = "county", by.y = "Name")
ag.pop.2 <- mutate(ag.pop , percap =  fund / population )
ag.pop.3 <- ag.pop.2[c("var", "fund", "percap", "county")]
return(ag.pop.3)
}
gra16.3
gra16.4 <- filter(gra16.3 , county %in% c("Onondaga", "Madison") )
pop.filtered <- filter(population.dat.2 , Name %in% c("Onondaga", "Madison") )
agg.per <- agg.county.percap(gra16.4, pop.filtered, gra16.4$recipient_type)
agg.per
donutzz(x =  agg.per$var , lev = agg.per$percap , main = "Funding by recipient")
class(x$Fans)
class(x$MGenre)
donutzz(x =  agg.per$percap , lev = agg.per$var , main = "Funding by recipient")
agg.per$var
class(agg.per$var)
as.factor(agg.per$var)
donutzz(x =  agg.per$percap , lev = as.factor(agg.per$var) , main = "Funding by recipient")
source_github <- function( url ) {
# load package
require(RCurl)
# read script lines from website and evaluate
script <- getURL(url, ssl.verifypeer = FALSE)
eval(parse(text = script), envir=.GlobalEnv)
}
#load the donutzz function using the RAW link
source_github("https://raw.githubusercontent.com/icps86/Functions/master/donutzz.R")
donutzz(x =  agg.per$percap , lev = agg.per$var , main = "Funding by recipient")
head(agg.per)
(agg.per)
ggplot(data=agg.per, aes(x=var, y=percap))
ggplot(data=agg.per, aes(x=var, y=percap)) +
geom_bar(stat="identity")
ggplot(data=agg.per, aes(x=var, y=percap)) +
geom_bar(stat="identity") +
facet_wrap(~county, ncol = 1) +
ggtitle("Multiples")
# Download the data, clean
gra16.named <- readRDS(gzcon(url("https://github.com/DataCapstone/Data-Capstone/blob/master/Raw-Data/NYgra16_counties_named.rds?raw=true")))
codes <- read.csv("https://raw.githubusercontent.com/DataCapstone/Data-Capstone/master/Raw-Data/countycodesNY.csv")
gra16.without.state <- filter(gra16.named , recipient_type != "00: State government")
gra16.2 <- mutate(gra16.without.state, county = as.character(Name))
gra16.3 <- gra16.2[ c("recipient_name" , "recipient_county_code", "county" , "recipient_type" , "fed_funding_amount" , "assistance_type" , "cfda_program_title" , "agency_name" ) ]
#Load the population data
censuskey <- "cc0582f55dc6c9f75f5ea92824c86e0ae5d0d5d8"
population.dat <- getCensus(name="acs5", vintage=2015, key=censuskey,
vars=c("B01001_001E"), region="county:*", regionin = "state: 36")
colnames(population.dat) <- c("state","county_code", "population")
population.dat$county_code <- as.numeric(as.character(population.dat$county_code))
population.dat.2 <- merge(population.dat , codes, by.x = "county_code", by.y = "Fips")
# Aggregation function
agg.county <- function(df , var){
ag <- aggregate(df$fed_funding_amount, by= list( df$county, var), FUN = sum  )
colnames(ag) <- c("county", "var", "fund")
return(ag)
}
# Per capita aggregation function
agg.county.percap <- function(df, df.p , var){
ag <- aggregate(df$fed_funding_amount, by= list( df$county, var), FUN = sum  )
colnames(ag) <- c("county", "var", "fund")
ag.pop <- merge(ag , df.p, by.x = "county", by.y = "Name")
ag.pop.2 <- mutate(ag.pop , percap =  fund / population )
ag.pop.3 <- ag.pop.2[c("var", "fund", "percap", "county")]
return(ag.pop.3)
}
# Per capita aggregation function, statewide
agg.percap <- function(df, df.p, var){
ag <- aggregate(df$fed_funding_amount, by= list( var), FUN = sum  )
colnames(ag) <- c("var", "fund")
ag.2 <- mutate(ag , county = "NY Average")
ag.per <- mutate(ag.2 , percap = fund / (sum(df.p$population)))
return(ag.per)
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(pander)
library(shiny)
library(censusapi)
library(plotly)
# Download the data, clean
gra16.named <- readRDS(gzcon(url("https://github.com/DataCapstone/Data-Capstone/blob/master/Raw-Data/NYgra16_counties_named.rds?raw=true")))
codes <- read.csv("https://raw.githubusercontent.com/DataCapstone/Data-Capstone/master/Raw-Data/countycodesNY.csv")
gra16.without.state <- filter(gra16.named , recipient_type != "00: State government")
gra16.2 <- mutate(gra16.without.state, county = as.character(Name))
gra16.3 <- gra16.2[ c("recipient_name" , "recipient_county_code", "county" , "recipient_type" , "fed_funding_amount" , "assistance_type" , "cfda_program_title" , "agency_name" ) ]
#Load the population data
censuskey <- "cc0582f55dc6c9f75f5ea92824c86e0ae5d0d5d8"
population.dat <- getCensus(name="acs5", vintage=2015, key=censuskey,
vars=c("B01001_001E"), region="county:*", regionin = "state: 36")
colnames(population.dat) <- c("state","county_code", "population")
population.dat$county_code <- as.numeric(as.character(population.dat$county_code))
population.dat.2 <- merge(population.dat , codes, by.x = "county_code", by.y = "Fips")
# Aggregation function
agg.county <- function(df , var){
ag <- aggregate(df$fed_funding_amount, by= list( df$county, var), FUN = sum  )
colnames(ag) <- c("county", "var", "fund")
return(ag)
}
# Per capita aggregation function
agg.county.percap <- function(df, df.p , var){
ag <- aggregate(df$fed_funding_amount, by= list( df$county, var), FUN = sum  )
colnames(ag) <- c("county", "var", "fund")
ag.pop <- merge(ag , df.p, by.x = "county", by.y = "Name")
ag.pop.2 <- mutate(ag.pop , percap =  fund / population )
ag.pop.3 <- ag.pop.2[c("var", "fund", "percap", "county")]
return(ag.pop.3)
}
# Per capita aggregation function, statewide
agg.percap <- function(df, df.p, var){
ag <- aggregate(df$fed_funding_amount, by= list( var), FUN = sum  )
colnames(ag) <- c("var", "fund")
ag.2 <- mutate(ag , county = "NY Average")
ag.per <- mutate(ag.2 , percap = fund / (sum(df.p$population)))
return(ag.per)
}
# National Aggregation
ny.grp <- mutate(gra16.3 , assistance_type.2 = ifelse( assistance_type == "04: Project grant", "Project Grants" , "Other Grants" ) )
ny.per <- agg.percap(ny.grp , population.dat.2 , ny.grp$assistance_type.2) #Function
colnames(ny.per)[1] <- "assistance_type.2"
ny.per.2 <- ny.per[c("assistance_type.2", "fund", "percap", "county")]
# Shiny input, county comparison
selectizeInput( inputId='your_county',
label='Select up to 5 counties to compare:',
choices= sort(unique(gra16.3$county)),
selected=c("Onondaga"),
multiple = TRUE,
options = list(maxItems = 5)
)
# Shiny input, recipient selector
radioButtons( inputId = 'recipient',
label = 'Pick a type of recipient:',
choices = c("Govenment", "Higher Education Institution", "Non Profit"))
# Shiny output 1: per capita funding, project grants compare
renderPlotly ({
gra16.4 <- filter(gra16.3 , county %in% input$your_county )
pop.filtered <- filter(population.dat.2 , Name %in% input$your_county )
gra16.4.2 <- mutate(gra16.4 , assistance_type.2 = ifelse( assistance_type == "04: Project grant", "Project Grants" , "Other Grants" ) )
gra16.agg <- agg.county.percap(gra16.4.2 , pop.filtered, gra16.4.2$assistance_type.2) #Function
colnames(gra16.agg)[1] <- "assistance_type.2"
gra16.agg.2 <- gra16.agg[c("assistance_type.2", "fund", "percap", "county")]
gra16.agg.3 <- rbind(gra16.agg.2 , ny.per.2)
cols <- c("#00CCFF","#3333FF")
ggplot(gra16.agg.3, aes(x = county, y = percap, fill = assistance_type.2)) +
geom_bar(stat = "identity") +
labs(x="County", y="Per Capita Funding") +
ggtitle("Per Capita Federal Funding by County") +
scale_y_continuous(labels = scales::comma) +
scale_fill_manual(values = cols) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank() , legend.title = element_blank())
})
# Shiny output 2:
renderPlot({
gra16.4 <- filter(gra16.3 , county %in% input$your_county )
pop.filtered <- filter(population.dat.2 , Name %in% input$your_county )
agg.per <- agg.county.percap(gra16.4, pop.filtered, gra16.4$agency_)
ggplot(data=agg.per, aes(x=var, y=percap)) +
geom_bar(stat="identity") +
facet_wrap(~county, ncol = 1) +
ggtitle("Multiples")
})
head(gra16.3)
head(gra16.2)
gra16.3 <- gra16.2[ c("recipient_name" , "recip_cat_type", "county" , "recipient_type" , "fed_funding_amount" , "assistance_type" , "cfda_program_title" , "agency_name" ) ]
# Download the data, clean
gra16.named <- readRDS(gzcon(url("https://github.com/DataCapstone/Data-Capstone/blob/master/Raw-Data/NYgra16_counties_named.rds?raw=true")))
codes <- read.csv("https://raw.githubusercontent.com/DataCapstone/Data-Capstone/master/Raw-Data/countycodesNY.csv")
gra16.without.state <- filter(gra16.named , recipient_type != "00: State government")
gra16.2 <- mutate(gra16.without.state, county = as.character(Name))
gra16.3 <- gra16.2[ c("recipient_name" , "recip_cat_type", "county" , "recipient_type" , "fed_funding_amount" , "assistance_type" , "cfda_program_title" , "agency_name" ) ]
#Load the population data
censuskey <- "cc0582f55dc6c9f75f5ea92824c86e0ae5d0d5d8"
population.dat <- getCensus(name="acs5", vintage=2015, key=censuskey,
vars=c("B01001_001E"), region="county:*", regionin = "state: 36")
colnames(population.dat) <- c("state","county_code", "population")
population.dat$county_code <- as.numeric(as.character(population.dat$county_code))
population.dat.2 <- merge(population.dat , codes, by.x = "county_code", by.y = "Fips")
# Aggregation function
agg.county <- function(df , var){
ag <- aggregate(df$fed_funding_amount, by= list( df$county, var), FUN = sum  )
colnames(ag) <- c("county", "var", "fund")
return(ag)
}
# Per capita aggregation function
agg.county.percap <- function(df, df.p , var){
ag <- aggregate(df$fed_funding_amount, by= list( df$county, var), FUN = sum  )
colnames(ag) <- c("county", "var", "fund")
ag.pop <- merge(ag , df.p, by.x = "county", by.y = "Name")
ag.pop.2 <- mutate(ag.pop , percap =  fund / population )
ag.pop.3 <- ag.pop.2[c("var", "fund", "percap", "county")]
return(ag.pop.3)
}
# Per capita aggregation function, statewide
agg.percap <- function(df, df.p, var){
ag <- aggregate(df$fed_funding_amount, by= list( var), FUN = sum  )
colnames(ag) <- c("var", "fund")
ag.2 <- mutate(ag , county = "NY Average")
ag.per <- mutate(ag.2 , percap = fund / (sum(df.p$population)))
return(ag.per)
}
# National Aggregation
ny.grp <- mutate(gra16.3 , assistance_type.2 = ifelse( assistance_type == "04: Project grant", "Project Grants" , "Other Grants" ) )
ny.per <- agg.percap(ny.grp , population.dat.2 , ny.grp$assistance_type.2) #Function
colnames(ny.per)[1] <- "assistance_type.2"
ny.per.2 <- ny.per[c("assistance_type.2", "fund", "percap", "county")]
# Shiny input, county comparison
selectizeInput( inputId='your_county',
label='Select up to 5 counties to compare:',
choices= sort(unique(gra16.3$county)),
selected=c("Onondaga"),
multiple = TRUE,
options = list(maxItems = 5)
)
# Shiny input, recipient selector
radioButtons( inputId = 'recipient',
label = 'Pick a type of recipient:',
choices = c("Govenment", "Higher Education Institution", "Non Profit"))
# Shiny output 1: per capita funding, project grants compare
renderPlotly ({
gra16.4 <- filter(gra16.3 , county %in% input$your_county )
pop.filtered <- filter(population.dat.2 , Name %in% input$your_county )
gra16.4.2 <- mutate(gra16.4 , assistance_type.2 = ifelse( assistance_type == "04: Project grant", "Project Grants" , "Other Grants" ) )
gra16.agg <- agg.county.percap(gra16.4.2 , pop.filtered, gra16.4.2$assistance_type.2) #Function
colnames(gra16.agg)[1] <- "assistance_type.2"
gra16.agg.2 <- gra16.agg[c("assistance_type.2", "fund", "percap", "county")]
gra16.agg.3 <- rbind(gra16.agg.2 , ny.per.2)
cols <- c("#00CCFF","#3333FF")
ggplot(gra16.agg.3, aes(x = county, y = percap, fill = assistance_type.2)) +
geom_bar(stat = "identity") +
labs(x="County", y="Per Capita Funding") +
ggtitle("Per Capita Federal Funding by County") +
scale_y_continuous(labels = scales::comma) +
scale_fill_manual(values = cols) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank() , legend.title = element_blank())
})
# Shiny output 2:
renderPlot({
gra16.4 <- filter(gra16.3 , county %in% input$your_county )
gra16.4.2 <- filter(gra16.4 , )
pop.filtered <- filter(population.dat.2 , Name %in% input$your_county )
agg.per <- agg.county.percap(gra16.4, pop.filtered, gra16.4$agency_name)
ggplot(data=agg.per, aes(x=var, y=percap)) +
geom_bar(stat="identity") +
facet_wrap(~county, ncol = 1) +
ggtitle("Multiples")
})
head(gra16.2)
head(gra16.4)
head(gra16.3)
gra16.2 <- mutate(gra16.without.state, county = as.character(Name))
head(gra16.2)
gra16.3 <- gra16.2[ c("recipient_name" , "recip_cat_type", "county" , "recipient_type" , "fed_funding_amount" , "assistance_type" , "cfda_program_title" , "agency_name" ) ]
head(gra16.3)
gra16.3
names(gra16.3)
head(gra16.3)
table(gra16.3$recip_cat_type)
gra16.4 <- filter(gra16.3 , county %in% c("Onondaga", "Madison") )
pop.filtered <- filter(population.dat.2 , Name %in%  c("Onondaga", "Madison") )
gra16.4.2 <- filter(gra16.4 , recip_cat_type == "g: Government")
agg.per <- agg.county.percap(gra16.4.2, pop.filtered, gra16.4$agency_name)
agg.percap()
agg.per
gra16.4.2
head(gra16.4.2)
agg.per <- agg.county.percap(gra16.4.2, pop.filtered, gra16.4.2$agency_name)
agg.per
length(unique(gra16.3$agency_name))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(pander)
library(shiny)
library(censusapi)
library(plotly)
# Download the data, clean
gra16.named <- readRDS(gzcon(url("https://github.com/DataCapstone/Data-Capstone/blob/master/Raw-Data/NYgra16_counties_named.rds?raw=true")))
codes <- read.csv("https://raw.githubusercontent.com/DataCapstone/Data-Capstone/master/Raw-Data/countycodesNY.csv")
gra16.without.state <- filter(gra16.named , recipient_type != "00: State government")
gra16.2 <- mutate(gra16.without.state, county = as.character(Name))
gra16.3 <- gra16.2[ c("recipient_name" , "recip_cat_type", "county" , "recipient_type" , "fed_funding_amount" , "assistance_type" , "cfda_program_title" , "agency_name" ) ]
x <- gra16.3$recip_cat_type == "i: Private agencies"
gra16.3$recip_cat_type[x] <- "f: Private agencies"
#making recip_cat_type into a factor and changing the levels into more friendly ones
gra16.3$recip_cat_type <- factor(x= gra16.3$recip_cat_type)
levels(gra16.3$recip_cat_type) <- c("Private firms",
"Government",
"Public Higher Ed. Inst.",
"Private Higher Ed. Inst.",
"Nonprofit agencies",
"Other")
# clean agency names a bit to be more consistent
simpleCap <- function(x) {
s <- tolower(x)
s <- strsplit(s, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
gra16.3$agency_name <-sapply(gra16.3$agency_name, simpleCap)
gra16.3$agency_name<-gsub( "Department Of ", "", as.character(gra16.3$agency_name), n)
View(gra16.3)
#Load the population data
population <- readRDS(gzcon(url("https://github.com/DataCapstone/Data-Capstone/blob/master/Raw-Data/NYcensus.rds?raw=true")))
recipient.filter <- filter(gra16.3, recipient_type %in% c("20: Private higher education"))
agency.agg <- aggregate (recipient.filter$fed_funding_amount, by=list(recipient.filter$agency_name, recipient.filter$Name), FUN=sum, na.rm=TRUE)
colnames(agency.agg)<- c("Agency", "County_Name", "Federal_Funding")
agg.pop <- merge(agency.agg , population, by.x = "County_Name", by.y = "county.name", all.x=TRUE)
agg.pop.percap <- mutate(agg.pop , percap =  Federal_Funding / Pop )
county.filter <- filter(agg.pop.percap, County_Name %in% c("Onondaga", "Erie", "Queens"))
county.filter.small <- subset (county.filter, select=c("County_Name", "Agency", "percap"))
counties.percap.ordered<- county.filter.small[order(county.filter.small$percap), ]
#agency.five <- tail(agency.agg, 5)
selected<-counties.percap.ordered[unlist(tapply(row.names(counties.percap.ordered), counties.percap.ordered$County_Name, tail, n = 3)), ]
ggplot(selected, aes(Agency, percap)) + geom_bar(aes(fill = County_Name),
position = position_dodge(), stat="identity") +  facet_wrap(~County_Name)+
theme(legend.position="right", legend.title =
element_blank(),axis.title.x=element_blank(),
axis.title.y= element_blank()) + coord_flip()
recipient.filter <- filter(gra16.3, recipient_type %in% c("20: Private higher education"))
agency.agg <- aggregate (recipient.filter$fed_funding_amount, by=list(recipient.filter$agency_name, recipient.filter$Name), FUN=sum, na.rm=TRUE)
colnames(agency.agg)<- c("Agency", "County_Name", "Federal_Funding")
head(recipient.filter)
agency.agg <- aggregate (recipient.filter$fed_funding_amount, by=list(recipient.filter$agency_name, recipient.filter$county), FUN=sum, na.rm=TRUE)
colnames(agency.agg)<- c("Agency", "County_Name", "Federal_Funding")
head(agency.agg)
agg.pop <- merge(agency.agg , population, by.x = "County_Name", by.y = "county.name", all.x=TRUE)
head(agg.pop)
agg.pop.percap <- mutate(agg.pop , percap =  Federal_Funding / Pop )
county.filter <- filter(agg.pop.percap, County_Name %in% c("Onondaga", "Erie", "Queens"))
county.filter.small <- subset (county.filter, select=c("County_Name", "Agency", "percap"))
View(county.filter.small)
View(county.filter.small)
View(county.filter)
View(county.filter)
View(county.filter.small)
View(county.filter.small)
counties.percap.ordered<- county.filter.small[order(county.filter.small$percap), ]
selected<-counties.percap.ordered[unlist(tapply(row.names(counties.percap.ordered), counties.percap.ordered$County_Name, tail, n = 3)), ]
View(selected)
ggplot(selected, aes(Agency, percap)) + geom_bar(aes(fill = County_Name),
position = position_dodge(), stat="identity") +  facet_wrap(~County_Name)+
theme(legend.position="right", legend.title =
element_blank(),axis.title.x=element_blank(),
axis.title.y= element_blank()) + coord_flip()
ggplot(selected, aes(Agency, percap)) + geom_bar(aes(fill = County_Name),
position = position_dodge(), stat="identity") +  facet_wrap(~County_Name)+
theme(legend.position="right", legend.title =
element_blank(),axis.title.x=element_blank(),
axis.title.y= element_blank()) + coord_flip() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank() , legend.title = element_blank())
ggplot(selected, aes(Agency, percap)) + geom_bar(aes(fill = County_Name),
position = position_dodge(), stat="identity") +  facet_wrap(~County_Name)+
theme(legend.position="right", legend.title =
element_blank(),axis.title.x=element_blank(),
axis.title.y= element_blank()) + coord_flip() +
theme(panel.grid.major = element_blank(),
panel.background = element_blank(), axis.line = element_blank() , legend.title = element_blank())
ggplot(selected, aes(Agency, percap)) + geom_bar(aes(fill = County_Name),
position = position_dodge(), stat="identity") +  facet_wrap(~County_Name)+
theme(legend.position="right", legend.title =
element_blank(),axis.title.x=element_blank(),
axis.title.y= element_blank()) + coord_flip() +
theme(
panel.background = element_blank(), axis.line = element_blank() , legend.title = element_blank())
ggplot(selected, aes(Agency, percap)) + geom_bar(aes(fill = County_Name),
position = position_dodge(), stat="identity") +  facet_wrap(~County_Name)+
theme(legend.position="right", legend.title =
element_blank(),axis.title.x=element_blank(),
axis.title.y= element_blank()) + coord_flip()
